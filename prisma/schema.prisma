generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bids          Bid[]
  orders        Order[]
  wishlist      Wishlist?
}

enum Role {
  USER
  ADMIN
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String
  images      String[]
  price       Float?        // For "Buy Now" items
  quantity    Int           @default(1)
  categoryId  String
  category    Category      @relation(fields: [categoryId], references: [id])
  listingType ListingType
  auction     Auction?
  bids        Bid[]
  orderItems  OrderItem[]
  wishlistItems WishlistItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum ListingType {
  AUCTION
  BUY_NOW
  BOTH
}

model Auction {
  id           String    @id @default(cuid())
  productId    String    @unique
  product      Product   @relation(fields: [productId], references: [id])
  startingBid  Float
  reservePrice Float?
  buyNowPrice  Float?
  startTime    DateTime
  endTime      DateTime
  status       AuctionStatus @default(PENDING)
  bids         Bid[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum AuctionStatus {
  PENDING
  ACTIVE
  ENDED
  SOLD
  CANCELLED
}

model Bid {
  id         String    @id @default(cuid())
  amount     Float
  productId  String
  product    Product   @relation(fields: [productId], references: [id])
  auctionId  String
  auction    Auction   @relation(fields: [auctionId], references: [id])
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  isWinning  Boolean   @default(false)
  createdAt  DateTime  @default(now())
}

model Order {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  items        OrderItem[]
  totalAmount  Float
  status       OrderStatus @default(PENDING)
  stripeId     String?
  zakatDonation Float?     // Optional Zakat donation amount
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Wishlist {
  id     String         @id @default(cuid())
  userId String         @unique
  user   User           @relation(fields: [userId], references: [id])
  items  WishlistItem[]
}

model WishlistItem {
  id        String   @id @default(cuid())
  wishlistId String
  wishlist  Wishlist @relation(fields: [wishlistId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  addedAt   DateTime @default(now())

  @@unique([wishlistId, productId])
} 